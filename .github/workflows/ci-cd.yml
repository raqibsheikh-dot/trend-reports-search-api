name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'

jobs:
  # ============================================
  # Backend Tests
  # ============================================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting
        run: |
          cd backend
          pip install ruff
          ruff check . --select E,F,W

      - name: Run type checking
        run: |
          cd backend
          pip install mypy
          mypy . --ignore-missing-imports || true

      - name: Run tests
        env:
          API_KEY: test_api_key_that_is_at_least_32_characters_long
          ENVIRONMENT: test
          CHROMA_DB_PATH: ./test_chroma_data
          ENABLE_CACHE: false
        run: |
          cd backend
          pytest tests/ \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing \
            -v \
            -m "not (llm or redis or s3 or slow)"

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  # ============================================
  # Frontend Tests
  # ============================================
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint || true

      - name: Build frontend
        env:
          VITE_API_URL: http://localhost:8000
          VITE_API_KEY: test_key
        run: |
          cd frontend
          npm run build

      - name: Check build size
        run: |
          cd frontend
          du -sh dist/

  # ============================================
  # Security Scanning
  # ============================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python security check
        run: |
          pip install safety
          cd backend
          safety check --file requirements.txt --output text || true

  # ============================================
  # Integration Tests (Optional - requires services)
  # ============================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run integration tests
        env:
          API_KEY: test_api_key_that_is_at_least_32_characters_long
          ENVIRONMENT: test
          REDIS_URL: redis://localhost:6379
          ENABLE_CACHE: true
        run: |
          cd backend
          pytest tests/ \
            -v \
            -m "integration and not (llm or s3)"

  # ============================================
  # Build & Deploy (Production)
  # ============================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_TOKEN }}
        run: |
          echo "Deploying to Render..."
          # Render auto-deploys on push to main if connected
          # This step can trigger manual deploy if needed
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" || true

      - name: Create deployment notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: 'âœ… Deployed to production successfully!'
            })

  # ============================================
  # Dependency Updates Check
  # ============================================
  dependency-check:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for outdated dependencies
        run: |
          cd backend
          pip install pip-audit
          pip-audit -r requirements.txt || true

      - name: Check npm packages
        run: |
          cd frontend
          npm outdated || true
